---
interface Props {
  currentPage: number;
  totalPages: number;
}

const { currentPage, totalPages } = Astro.props;

function generatePaginationArray(current: number, total: number) {
  const delta = 2;
  const range = [];
  const rangeWithDots = [];
  let l;

  range.push(1);

  for (let i = current - delta; i <= current + delta; i++) {
    if (i < total && i > 1) {
      range.push(i);
    }
  }
  
  if (total !== 1) {
    range.push(total);
  }

  for (let i of range) {
    if (l) {
      if (i - l === 2) {
        rangeWithDots.push(l + 1);
      } else if (i - l !== 1) {
        rangeWithDots.push('...');
      }
    }
    rangeWithDots.push(i);
    l = i;
  }

  return rangeWithDots;
}

const pages = generatePaginationArray(currentPage, totalPages);
---

<div class="flex justify-center space-x-2 mt-8">
  {currentPage > 1 ? (
    <a
      href={`?page=${currentPage - 1}`}
      class="px-3 py-1 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300"
    >
      Previous
    </a>
  ) : (
    <span class="px-3 py-1 rounded-md bg-gray-100 text-gray-400 cursor-not-allowed">
      Previous
    </span>
  )}
  
  {pages.map((page) => (
    page === '...' 
      ? <span class="px-3 py-1">...</span>
      : <a
          href={`?page=${page}`}
          class={`px-3 py-1 rounded-md ${
            currentPage === page
              ? 'bg-blue-500 text-white'
              : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
          }`}
        >
          {page}
        </a>
  ))}
  
  {currentPage < totalPages ? (
    <a
      href={`?page=${currentPage + 1}`}
      class="px-3 py-1 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300"
    >
      Next
    </a>
  ) : (
    <span class="px-3 py-1 rounded-md bg-gray-100 text-gray-400 cursor-not-allowed">
      Next
    </span>
  )}
</div>

<script is:inline>
  // Preserve filters when paginating
  document.querySelectorAll('.flex.justify-center a').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const url = new URL(link.href);
      const currentFilters = new URLSearchParams(window.location.search);
      
      // Preserve all current filters except page
      for (let [key, value] of currentFilters.entries()) {
        if (key !== 'page') {
          url.searchParams.set(key, value);
        }
      }
      
      window.location.href = url.toString();
    });
  });
</script>