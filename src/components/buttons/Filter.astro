---
import {
  getLangFromUrl,
  useTranslations,
} from "../../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="bg-white p-4 rounded-lg shadow-md mb-6">
    <h2 class="text-xl font-heading mb-4">{t("filter.title")}</h2>
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <!-- Property Type -->
        <div>
            <label class=" block text-sm font-medium text-gray-700 mb-1 font-pattern">{t("filter.type")}</label>
            <select id="propertyType" class="bg-slate-200 block w-full rounded-md border border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm font-pattern">
                <option value="all">{t("filter.all-type")}</option>
                <option value="for_rent">Rent</option>
                <option value="for_sale">Sale</option>
            </select>
        </div>

        <!-- Price Range -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-pattern">{t("filter.price")}</label>
            <div class="flex items-center space-x-2">
                <input pattern="^\$\d{1,3}(,\d{3})*(\.\d+)?$" type="text" data-type="currency" id="minPrice" placeholder="Min (0)" class="bg-slate-200 font-pattern sm:text-sm w-1/2 rounded-md border border-gray-300 py-2 px-3 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500">
                <span class="text-gray-500">-</span>
                <input pattern="^\$\d{1,3}(,\d{3})*(\.\d+)?$" type="text" data-type="currency" id="maxPrice" placeholder="Max" class="bg-slate-200 font-pattern sm:text-sm w-1/2 rounded-md border border-gray-300 py-2 px-3 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500">
            </div>
        </div>

        <!-- Bedrooms -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-pattern">{t("filter.bed")}</label>
            <select id="bedrooms" class="bg-slate-200 block w-full rounded-md border border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm font-pattern">
                <option value="all">{t("filter.any")}</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4+">4+</option>
            </select>
        </div>

        <!-- Bathrooms -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1 font-pattern">{t("filter.bath")}</label>
            <select id="bathrooms" class="bg-slate-200 block w-full rounded-md border border-gray-300 py-2 pl-3 pr-10 text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm font-pattern">
                <option value="all">{t("filter.any")}</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4+">4+</option>
            </select>
        </div>
    </div>
</div>

<script is:inline>
    let db;
    
    document.addEventListener('astro:page-load', () => {
        initializeIndexedDB();
    });
    
    document.addEventListener('astro:after-swap', () => {
        console.log('Page loaded via Astro routing');
        initializeIndexedDB();
    });
    
    function initializeIndexedDB() {
        const DB_NAME = 'FiltersDB';
        const DB_VERSION = 1;
        const STORE_NAME = 'filters';
    
        const request = indexedDB.open(DB_NAME, DB_VERSION);
    
        request.onupgradeneeded = function(event) {
            const db = event.target.result;
            if (!db.objectStoreNames.contains(STORE_NAME)) {
                db.createObjectStore(STORE_NAME, { keyPath: 'id' });
            }
        };
    
        request.onsuccess = function(event) {
            db = event.target.result;
            loadFiltersFromIndexedDB();
        };
    
        request.onerror = function(event) {
            console.error("Error opening IndexedDB:", event.target.errorCode);
        };
    }
    
    function loadFiltersFromIndexedDB() {
        const transaction = db.transaction(['filters'], 'readonly');
        const store = transaction.objectStore('filters');
    
        const filters = ['propertyType', 'minPrice', 'maxPrice', 'bedrooms', 'bathrooms'];
        filters.forEach(filterId => {
            const getRequest = store.get(filterId);
            getRequest.onsuccess = function() {
                const filterElement = document.getElementById(filterId);
                if (filterElement && getRequest.result) {
                    filterElement.value = getRequest.result.value;
                }
            };
        });
    
        attachEventListeners();
        setTimeout(filterProperties, 300);
    }
    
    function attachEventListeners() {
        const filters = ['propertyType', 'minPrice', 'maxPrice', 'bedrooms', 'bathrooms'];
        filters.forEach(filterId => {
            const filterElement = document.getElementById(filterId);
            if (filterElement) {
                filterElement.addEventListener('input', () => {
                    saveFilterToIndexedDB(filterId, filterElement.value);
                    filterProperties();
                });
            }
        });
    }
    
    function saveFilterToIndexedDB(filterId, value) {
        const transaction = db.transaction(['filters'], 'readwrite');
        const store = transaction.objectStore('filters');
        store.put({ id: filterId, value });
    
        transaction.oncomplete = function() {
            console.log(`Filter ${filterId} saved successfully.`);
        };
    
        transaction.onerror = function(event) {
            console.error(`Error saving filter ${filterId}:`, event.target.error);
        };
    }
    
    function filterProperties() {
        const propertyType = document.getElementById('propertyType').value;
        const minPrice = parseInt(document.getElementById('minPrice').value) || 0;
        const maxPrice = parseInt(document.getElementById('maxPrice').value) || Infinity;
        const bedrooms = document.getElementById('bedrooms').value;
        const bathrooms = document.getElementById('bathrooms').value;
        const properties = document.querySelectorAll('.property-card');
    
        properties.forEach(property => {
            const price = parseInt(property.dataset.price) || 0;
            const beds = property.dataset.bedrooms;
            const baths = property.dataset.bathrooms;
            const type = property.dataset.type;
            let show = true;
    
            if (propertyType !== 'all') {
                show = show && type === propertyType;
            }
    
            show = show && price >= minPrice && price <= maxPrice;
    
            if (bedrooms !== 'all') {
                const minBeds = parseInt(bedrooms);
                show = show && (beds === bedrooms || (bedrooms === '4+' && parseInt(beds) >= 4));
            }
    
            if (bathrooms !== 'all') {
                const minBaths = parseInt(bathrooms);
                show = show && (baths === bathrooms || (bathrooms === '4+' && parseInt(baths) >= 4));
            }
    
            property.style.display = show ? 'block' : 'none';
        });
    }
    </script>