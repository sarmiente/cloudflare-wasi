---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '../../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

---

<section class="text-gray-600 relative py-32">
    
    
    <div class="absolute inset-0 bg-gray-300">
     

      <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d62788.28715214592!2d-75.54972488881704!3d10.400280541916928!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x8ef625e7ae9d1351%3A0xb161392e033f26ca!2sCartagena%2C%20Cartagena%20Province%2C%20Bolivar!5e0!3m2!1sen!2sco!4v1738011194849!5m2!1sen!2sco" width="100%" height="100%" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>

    </div>
    <form method="POST"
    id="formDos" 
    data-astro-reload
    class="needs-validation space-y-6">

    <!-- Add your Web3Forms Access Key -->
    <input
    type="hidden"
    name="access_key"
    value="a24e69d9-ed88-4638-8287-aaa5f5e9ce9f"
  />
   <input type="checkbox" class="hidden" style="display:none" name="botcheck" />
    <div class="container px-5 py-24 mx-auto flex">



      <div class="lg:w-1/3 md:w-1/2 bg-white rounded-lg p-8 flex flex-col md:ml-auto w-full mt-10 md:mt-0 relative shadow-md">
        <h2 class="text-gray-900 text-2xl mb-1 font-medium font-heading">{t("contact.title")}</h2>
        <p class="leading-relaxed mb-5 text-md text-gray-600 font-pattern">{t("contact.desc")}</p>
        <div class="relative mb-4">
          <label for="email" class="leading-7 text-sm text-gray-600 font-pattern">{t("cta.mail")}</label>
          <input type="email" id="email" name="email" class="w-full bg-white rounded border border-gray-300 focus:border-second focus:ring-2 focus:ring-second/50 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out">
        </div>
        <div class="relative mb-4">
          <label for="message" class="leading-7 text-sm text-gray-600 font-pattern">{t("cta.msg-label")}</label>
          <textarea id="message" name="message" class="w-full bg-white rounded border border-gray-300 focus:border-second focus:ring-2 focus:ring-second/50 h-32 text-base outline-none text-gray-700 py-1 px-3 resize-none leading-6 transition-colors duration-200 ease-in-out"></textarea>
        </div>
        <button  type="submit" class="text-white bg-second/80 border-0 py-2 px-6 focus:outline-none hover:bg-second rounded text-lg">{t("contact.book")}</button>

        <div class="text-center py-3">
          <label class="text-sm font-pattern">
            <input required type="checkbox" name="terms" class="accent-second" />
            {t("contact.msg")}
          </label>
        </div>

        <div id="resultDos" class="mt-3 text-center font-body"></div>

        <p class="text-xs text-center text-gray-500 ">{t("cta.msg")}</p>
        
      </div>

     
    </div>

  </form>
  </section>

  <style>
 

    .validated :placeholder-shown:invalid ~ .empty-feedback {
      display: block;
    }
  
    .validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
      display: block;
    }
  
    .invalid,
    .validated :invalid {
      border-color: #dc3545;
    }
  </style>

  
<script is:inline>

  // use astro:page-load event if you are using View Transitions
  document.addEventListener(
    "astro:page-load",
    () => {
      const formDos = document.getElementById("formDos");
      const resultDos = document.getElementById("resultDos");

      formDos.addEventListener("submit", function (e) {
        e.preventDefault();
        formDos.classList.add("validated");
        if (!formDos.checkValidity()) {
          formDos.querySelectorAll(":invalid")[0].focus();
          return;
        }
        const formData = new FormData(formDos);
        const object = Object.fromEntries(formData);
        const json = JSON.stringify(object);
        
        resultDos.innerHTML = "Sending...";

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        })
          .then(async (response) => {

            let json = await response.json();
            if (response.status == 200) {
              resultDos.classList.add("text-oxford-blue");
              resultDos.innerHTML = "¡Correo enviado con éxito! Nos comunicaremos en menos de 24 horas."
            } else {
              console.log(response);
              resultDos.classList.add("text-red-500");
              resultDos.innerHTML = json.message;
            }
          })
          .catch((error) => {
            console.log(error);
            resultDos.innerHTML = "Something went wrong!";
          })
          .then(function () {
            formDos.reset();
            formDos.classList.remove("validated");
            setTimeout(() => {
              resultDos.style.display = "none";
            }, 10000);
          });
      });
    },
    { once: true }
  );
</script>