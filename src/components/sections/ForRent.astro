---
// @ts-nocheck

// i18n
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "../../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

// API Call
const urlSearch = "https://api.wasi.co/v1/property/search?";
const take = 3;
const options = {
  method: "POST",
  headers: {
    "Content-Type": "application/json; charset=UTF-8",
    Authentication: `Bearer ${import.meta.env.PUBLIC_ID_COMPANY}`,
  },
};

let data = {};

try {
  data = await (async () => {
    const response = await fetch(
      `${urlSearch}id_company=${import.meta.env.PUBLIC_ID_COMPANY}&wasi_token=${import.meta.env.PUBLIC_WASI_TOKEN}&take=${take}&skip=1&for_rent=true`,
      options
    );

    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status}`);
    }

    return await response.json();
  })();
} catch (error) {
  console.error("Error fetching properties:", error);
}

const properties = Object.keys(data || {})
  .filter((key) => key !== "total" && key !== "status")
  .map((key) => data[key]);
---

<main class="container mx-auto px-4 pb-12">
  <div class="grid lg:grid-cols-3 gap-8 py-10">
    <div>
      <h2 class="text-3xl font-light font-heading text-black intersect:animate-fade-right animate-delay-200">
        {t("rent.title")}
      </h2>
      <p class="text-pretty font-pattern mt-4 text-gray-500">
        {t("rent.desc")}
      </p>
    </div>
    <div class="flex flex-col lg:col-start-3">
      <a
        title="Your title"
        aria-label="Your title"
        href={translatePath("/buy")}
        class="text-black font-pattern hover:text-main mt-auto flex gap-3 items-center justify-between"
        >{t("rent.btn")}
        <svg
          width="71"
          height="16"
          viewBox="0 0 71 15"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M0.996338 6.5C0.444053 6.5 -0.00366211 6.94772 -0.00366211 7.5C-0.00366211 8.05228 0.444053 8.5 0.996338 8.5V6.5ZM69.7739 8.20711C70.1645 7.81658 70.1645 7.18342 69.7739 6.79289L63.41 0.428932C63.0194 0.0384079 62.3863 0.0384079 61.9958 0.428932C61.6052 0.819456 61.6052 1.45262 61.9958 1.84315L67.6526 7.5L61.9958 13.1569C61.6052 13.5474 61.6052 14.1805 61.9958 14.5711C62.3863 14.9616 63.0194 14.9616 63.41 14.5711L69.7739 8.20711ZM0.996338 8.5H69.0668V6.5H0.996338V8.5Z"
            fill="currentColor"></path>
        </svg>
        </a
      >
    </div>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 border-t-1 pt-5">
    {
      properties.length > 0 ? (
        properties.map((property) => (
          <div
            class="property-card hover:scale-102 transition-transform"
            data-type={
              property.for_rent === "true"
                ? "for_rent"
                : property.for_sale === "true"
                  ? "for_sale"
                  : "unknown"
            }
            data-price={property.sale_price || property.rent_price}
            data-bedrooms={property.bedrooms || "0"}
            data-bathrooms={property.bathrooms || "0"}
          >
            <a
              href={translatePath(`/property/${property.id_property}`)}
              class="block"
            >
              <div class="bg-gray-100 overflow-hidden">
                <img
                  loading="lazy"
                  src={property.main_image.url_original}
                  alt="Property Image"
                  class="w-full rounded-t-lg h-60 object-cover"
                />
                <div class="p-4">
                  <dl class="w-full divide-y border-b border-gray-200 divide-gray-200">
                    <div class="gap-2 py-2">
                      <dt class="text-black font-pattern font-medium uppercase">
                        {property.title}
                      </dt>
                    </div>
                    <div class="gap-2 py-2 grid grid-cols-2 md:grid-cols-3 justify-between">
                      <div class="font-pattern">
                        <dt class="text-black">Area</dt>
                        <dd class="text-gray-500">
                          {property.built_area
                            ? `${property.built_area} mÂ²`
                            : ""}
                        </dd>
                      </div>
                      <div class="font-pattern">
                        <dt class="text-black">{t("filter.bed")}</dt>
                        <dd class="text-gray-500">{property.bedrooms}</dd>
                      </div>
                      <div class="font-pattern">
                        <dt class="text-black">{t("filter.bath")}</dt>
                        <dd class="text-gray-500">{property.bathrooms}</dd>
                      </div>
                    </div>
                    <div class="gap-2 py-2 font-pattern">
                      <dt class="text-black">Price</dt>
                      <dd class="text-gray-500">
                        {property.for_sale === "true" &&
                        property.sale_price &&
                        property.sale_price !== 0 ? (
                          <span class="text-main">
                            {t("list.sale-price")} {property.sale_price_label}
                          </span>
                        ) : null}
                        {property.for_rent === "true" &&
                        property.rent_price &&
                        property.rent_price !== 0 ? (
                          <span class="text-second">
                            {t("list.rent-price")} {property.rent_price_label}
                          </span>
                        ) : null}
                      </dd>
                    </div>
                  </dl>
                </div>
              </div>
            </a>
          </div>
        ))
      ) : (
        <p>Refresh page</p>
      )
    }
  </div>
</main>
